Ονοματεπώνυμο: Γιάννης Ρέππας
Αριθμός Μητρώου: 1115201500137


types.h:

TIME_PORT_FUNCTIONS --> χρόνος που θα τρέχει το monitor
NUMBER_OF_VESSELS --> αριθμός των vessel που θα τρέξει το myport
TIME --> μεταβλητή time για τον monitor
STATTIMES --> μεταβλητή stattimes για monitor


myport:

	Το myport είναι το πρόγραμμα το οποίο δημιουργεί και αρχικοποιεί την κοινή μνήμη και το σημαφόρο και
εκτελεί τα προγράμματα monitor port-master και vessel. Αρχικά ελέγχεται αν ο χρήστης έδωσε σωστή εντολή
από το command line και αν ναι, τότε παίρνουμε τα ορίσματα που έσωσε. Στη συνέχεια, καλούμε τη συνάρτηση
που δημιουργεί και αρχικοποιεί την κοινή μνήμη.
	Στη συνάρτηση αυτή αρχικά παίρνουμε τα δεδομένα από το configfile και στη συνέχεια δημιουργούμε την κοινή
μνήμη. Η κοινή μνήμη έχει την εξής δομή: monitor time(int) - αριθμός συνολικών θέσεων για πλοία στο λιμάνι
(int) - θέσεις πλοίων στο λιμάνι (Vessel) (στην ουσία είναι πλοία με σταθερά τα status, placeType και cost)-
- συνολικός αριθμός χρημάτων που μαζεύτηκαν από το λιμάνι (int) - μ.ο. χρημάτων που μαζεύτηκαν από το λιμάνι
για κάθε πλοίο (float) - total wait time για μικρά πλοία (int) - total wait time για μεσαία πλοία (int)-
- total wait time για μεγάλα πλοία (int)- μ.ο. wait time για μικρά πλοία (float)- μ.ο. wait time για μεσαία 
πλοία (float) - μ.ο. wait time για μεγάλα πλοία (float)- όνομα σημαφόρου (string)- τιμή για το αν 
χρησιμοποιείται το λιμάνι (int) (0 ή 1 πιθανές τιμές) - id της διεργασίας του port-master (int) 
- μήκος ουράς των vessels που περιμένουν άδεια από το λιμάνι για να παρκάρουν ήνα ξεπαρκάρουν (int) -
 id της μητέρας διεργασίας των vessels (int). Τέλος, κάνουμε detach την κοινή μνήμη και τελειώνει 
η συνάρτηση.
	Στη συνέχεια, αφού έχουμε δημιουργήσει την κοινή μνήμη, εκτελούμε τα προγράμματα. Τα προγράμματα εκτελούνται 
με fork(). Το myport θα τερματίσει μόνο όταν τελειώσει τη λειτουργεία του ο monitor. Ο monitor θα τελειώσει 
όταν θα τελειώσει ο port-master , port-master όταν τελειώσει η διεργασία-μητέρα των vessels και η διεργασία 
μητέρα των vessels όταν τελειώσουν όλα της τα παιδιά. Με αυτόν τον τρόπο, βεβαιωνόμαστε ότι η κοινή μνήμη θα 
απελευθερωθεί στο τέλος του προγράμματος και δε θα έχουμε προβλήματα.


monitor:

	Αρχικά παίρνουμε την είσοδο από το command line και λαμβάνουμε ορισμένα χρήσιμα στοιχεία για το λιμάνι. Στη
συνέχεια, για όση ώρα έχει δώσει ο χρήστης να τρέχει το λιμάνι, λαμβάνουμε ανά δευτερόλεπτο τα δεδομένα από την
κοινή μνήμη και τα εκτυπώνουμε εάν η χρονική στιγμή είναι αυτή που πρέπει. Τέλος, αφού σταματάμε να εκτυπώνουμε,
περιμένουμε την ολοκλήρωση του port-master και τερματίζεται το monitor.


port-master:

	Αρχικά διαβάζουμε δεδομένα από την κοινή μνήμη. Στη συνέχεια, όσο λειτουργεί το λιμάνι, ο port-master λαμβάνει 
αιτήσεις από πλοία να χρησιμοποιήσουν το λιμάνι. Εάν το λιμάνι δε χρησιμοποιείται από κάποιον, τότε ο port-master
δίνει άδεια για ένα μόνο πλοίο να το χρησιμοποιήσει. Όταν το πλοίο κάνει την κίνησή του, ενημερώνει τον port-master
και ο port-master επιρέπει σε νέο πλοίο να κάνει ελιγμό.
	Όταν ο χρόνος του λιμανιού τελειώσει, υπάρχει περίπτωση μερικά πλοία να περιμένουν από τον port-master για να
κάνουν κάποιον ελιγμό στο λιμάνι. Ο port-master λοιπόν θα κάνει τόσα sem_post όσα είναι και τα πλοία που περιμένουν.
Αυτόο μπορεί να σημαίνει πως όλα μαζί θα κάνουν κίνηση στο λιμάνι ταυτόχρονα, στην πραγματικότητα όμως δε θα κάνει
κανένα τους κάποια κίνηση, επειδή έχει τελειώσει ο χρόνος του λιμανιόύ και η διεργασία τους θα τερματιστεί.
	Τέλος όπως και σε όλες τις διεργασίες, γίνεται detach στο shared memory και τερματίζει ο port-master.

Σημείωση: Ο port-master που έχω φτιάξει δεν έχει αρχείο charges, επειδή έχω θεωρήσει πως όλα τα δεδομένα δίνονται
από το αρχείο configfile.


vessel:


	Αρχικά λαμβάνονται τα δεδομένα που θέλουμε από το command line και την κοινή μνήμη και αρχικοποιούμε το πλοίο
στη μεταβλητή currentVessel. Στη συνέχεια, το πλοίο παίρνει άδεια από τον port-master να μπει στο λιμάνι και αν υπάρχει
χώρος προωθείται στη θέση του, ανημερώνοντας και τον port-master όταν τελειώσει το παρκάρισμα, διαφορετικά τερματίζει.
	Στη συνέχεια μένει στο λιμάνι για όση ώρα χρειάζεται και περιμένει να πάρει άδεια από τον port-master για να αποχωρήσει.
	Όταν πάρει άδεια από τον port-master και αποχωρήσει, ενημερώνει το κομμάτι public ledger που περιέχει τα πλοία που έχουν
αποχωρήσει (results.txt) και το κομμάτι της κοινής μνήμης που περιέχει στατιστικά του λιμανιού.