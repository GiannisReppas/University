Ονοματεπώνυμο: Γιάννης Ρέππας
Α.Μ.: 1115201500137

compile --> make all
clean --> make clean

dropbox_server.c:

Για τη λίστα έχουμε μια καθολική μεταβλητή ListNode *head, η οποία είναι η κορυφή της λίστας και στη αρχή είναι άδεια. Ο κάθε κόμβος έχει όπως αναφέρει η εκφώνηση περιέχει την ip address και το port επικοινωνίας με τον client, καθώς και ένα δείκτη που δείχνει στον επόμενο κόμβο της λίστας.
Η συνάρτηση main αρχικά δημιουργεί ένα socket για την δημιουργία συνδέσεων μεταξύ των clients και του server( socket -> bind -> listen) και στη συνέχεια κάνει accept για κάθε καινούριο client που επιθυμεί να συνδεθεί. Μετά από κάθε accept δημιουργείται ένα καινούριο thread το οποίο αναλαμβάνει την επεξεργασία της κάθε εντολής που στέλνει ο server. Σε κάθε thread περνιέται ως όρισμα ένα struct το οποίο περιέχει πληροφορία για το socket από το οποίο θα γίνει το διάβασμα της εντολής καθώς και πληροφορία για την ip address του client που συνδέθηκε.
Το thread αρχικά διαβάζει τα δεδομένα που του περάστηκαν από το struct και στη συνέχεια διαβάζει τα δεδομένα από το socket. Ανάλογα με την πρώτη λέξη που διαβάστηκε, καλείται και η ανάλογη συνάρτηση(log_on, get_clients, log_off). Οι λέξεις θεωρείται πως περνιούνται στο socket με μόνο ένα space ενδοιάμεσα. Όλες οι συναρτήσεις που υλοποιούνται ξεκινούν και τελειώνουν με mutex lock/unlock , καθώς μέσα σε αυτές γίνεται επεξεργασία της λίστας.
Η συνάρτηση log_on αρχικά δημιουργεί ένα νέο κόμβο για τη λίστα και τον τοποθετεί σε αυτήν. Φυσικά, προτού τον τοποθετήσει στο τέλος της λίστας, ελέγχει και αν αυτός ο κόμβος υπάρχει ήδη και άρα το log_on δεν μπορεί να γίνει. Στη συνέχεια, δημιουργεί μια ανάποδη σύνδεση μεταξύ του server και του client, στην οποία ο server κάνει connect με κάθε client στη λίστα και του περνάει τα στοιχεία του νέου κόμβου(USER_ON).
Αντίστοιχη λειτουργία έχουμε και με την log_off , με τη μόνη διαφορά ότι εδώ ο κόμβος διαγράφεται αντί να εισαχθεί στη λίστα και στη συνέχεια στέλνεται USER_OFF στους υπόλοιπους clients.
Τέλος, η συνάρτηση get_clients διαβάζει όλη τη λίστα και επιστρέφει στον client με τον οποίο έγινε αρχικά η σύνδεση πρώτα το μέγεθος της λίστας και στη συνέχεια όλα της τα δεδομένα.

itoa_plus_nod.c:

Περιέχει δική μου υλοποίηση της συνάρτησης itoa και συνάρτησης που επιστρέφει τον αριθμό των ψηφίων ενός ακέραιου αριθμού.

temp_client.c:

Εκτέληση: ./tempclient server_host_name server_port client_port
Είναι ένα δικός μου client για να δείξω ότι ο server δουλεύει σωστά. Δίνουμε από το πληκτρολόγιο μια εντολή στο server και εφόσον είναι USER_ON/USER_OFF μπλοκάρει σε μια accept και περιμένει απάντηση από το server για κάποια άλλη εντολή. Μετά τερματίζει το πρόγραμμα. Επίσης, έχει την ιδιαιτερότητα πως αν για port δωθεί 9004, μετά από USER_ON/USER_OFF δεν ακολουθείται accept και recv. Οπότε για τη δοκιμή όλων των εντολών με 2 clients έχουμε τα εξής βήματα:

1. τρέχουμε το server
2. τρέχουμε 2 clients τον ένα με client_port 9004 , τον άλλο με client_port != 9004
3. τρέχουμε 2 log_on, πρώτα για τον client με client_port != 9004
Βλέπουμε έτσι και τα αποτελέσματα της USER_ON
4. Ξανατρέχουμε οποιονδήποτε από τους 2 με τον εντολή GET_CLIENTS
5. Ξανατρέχουμε και τους 2, στο client με client_port != 9004 τρέχουμε ξανα LOG_ON( κανένα αποτέλεσμα) και στον άλλο client LOG_OFF. Έτσι βλέπουμε και τα αποτελέσματα της USER_OFF